import os
import cv2
import numpy as np
import matplotlib.pyplot as plt

net = cv2.dnn.readNet('/kaggle/input/industrial-defect/yolov3.weights', '/kaggle/input/industrial-defect/yolov3.cfg')

with open('/kaggle/input/industrial-defect/coco.names', 'r') as f:
    classes = [line.strip() for line in f.readlines()]

directory = '/kaggle/input/neu-urface-defect-database/NEU-DET/IMAGES'
image_files = [os.path.join(directory, f) for f in os.listdir(directory)][:4]

fig, axes = plt.subplots(1, len(image_files), figsize=(20, 5))

for idx, image_path in enumerate(image_files):
    image = cv2.imread(image_path)

    if image is None:
        print(f"Error: Unable to load image at {image_path}")
        continue

    height, width, _ = image.shape
    blob = cv2.dnn.blobFromImage(image, 0.00392, (416, 416), (0, 0, 0), True, crop=False)

    net.setInput(blob)
    layer_names = net.getLayerNames()
    output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]

    outs = net.forward(output_layers)

    boxes, confidences, class_ids = [], [], []
    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)
                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    indices = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    if len(indices) > 0:
        for i in indices.flatten():
            x, y, w, h = boxes[i]
            label = str(classes[class_ids[i]])
            print(f"Detected {label} with confidence {confidences[i]:.2f} at ({x}, {y}, {w}, {h})")
            cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.putText(image, label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)

    axes[idx].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    axes[idx].set_title(os.path.basename(image_path))
    axes[idx].axis('off')

plt.tight_layout()
plt.show()
